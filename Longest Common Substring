#include <iostream>
#include <vector>

// Function to print the dynamic programming table
void printTable(const std::vector<std::vector<int>>& table) {
    for (const auto& row : table) {
        for (int cell : row) {
            std::cout << cell << " ";
        }
        std::cout << std::endl;
    }
}

// Function to find the longest common substring
std::string findLongestCommonSubstring(const std::string& str1, const std::string& str2) {
    int len1 = str1.length();
    int len2 = str2.length();

    // Creating a table to store the lengths of common substrings
    std::vector<std::vector<int>> dp(len1 + 1, std::vector<int>(len2 + 1, 0));
    int maxLength = 0; // Tracks the length of the longest common substring
    int endIndex = 0; // Stores the ending index of the longest common substring

    // Filling the table and find the longest common substring
    for (int i = 1; i <= len1; ++i) {
        for (int j = 1; j <= len2; ++j) {
            if (str1[i - 1] == str2[j - 1]) {
                dp[i][j] = dp[i - 1][j - 1] + 1;
                if (dp[i][j] > maxLength) {
                    maxLength = dp[i][j];
                    endIndex = i - 1; // Update the end index of the substring
                }
            } else {
                dp[i][j] = 0; // No common substring
            }
        }
    }

    // Displaying the dynamic programming table
    std::cout << "Dynamic Programming Table:" << std::endl;
    printTable(dp);

    // Extracting the longest common substring
    std::string result = str1.substr(endIndex - maxLength + 1, maxLength);
    return result;
}

int main() {
    // Example input strings
    std::string string1 = "TSRTCTS";
    std::string string2 = "APSRTC";

    // Finding the longest common substring
    std::string longestCommonSub = findLongestCommonSubstring(string1, string2);
    
    // Displaying the longest common substring
    std::cout << "\nLongest Common Substring: " << longestCommonSub << std::endl;

    return 0;
}
