#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <cstdint>

constexpr uint32_t K[] = {
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
    0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
    0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
    0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
    0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
    0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
    0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2};

uint32_t H[] = {
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19};

uint32_t rotateRight(uint32_t x, uint32_t n) {
    return (x >> n) | (x << (32 - n));
}

uint32_t choose(uint32_t x, uint32_t y, uint32_t z) {
    return (x & y) ^ (~x & z);
}

uint32_t majority(uint32_t x, uint32_t y, uint32_t z) {
    return (x & y) ^ (x & z) ^ (y & z);
}

uint32_t sigmaZero(uint32_t x) {
    return rotateRight(x, 2) ^ rotateRight(x, 13) ^ rotateRight(x, 22);
}

uint32_t sigmaOne(uint32_t x) {
    return rotateRight(x, 6) ^ rotateRight(x, 11) ^ rotateRight(x, 25);
}

uint32_t gammaZero(uint32_t x) {
    return rotateRight(x, 7) ^ rotateRight(x, 18) ^ (x >> 3);
}

uint32_t gammaOne(uint32_t x) {
    return rotateRight(x, 17) ^ rotateRight(x, 19) ^ (x >> 10);
}

std::string sha256(const std::string &message) {
    size_t bitLength = message.length() * 8;
    std::string paddedMessage = message + (char)0x80;
    while ((paddedMessage.length() * 8 + 64) % 512 != 0) {
        paddedMessage += (char)0x00;
    }
    paddedMessage += std::string((char *)&bitLength, sizeof(bitLength));

    size_t i = 0;
    while (i < paddedMessage.length()) {
        uint32_t block[64] = {0};
        size_t j = 0;
        while (j < 16) {
            block[j] = ((uint32_t)paddedMessage[i + j * 4] << 24) |
                       ((uint32_t)paddedMessage[i + j * 4 + 1] << 16) |
                       ((uint32_t)paddedMessage[i + j * 4 + 2] << 8) |
                       ((uint32_t)paddedMessage[i + j * 4 + 3]);
            j++;
        }
        j = 16;
        while (j < 64) {
            block[j] = gammaOne(block[j - 2]) + block[j - 7] + gammaZero(block[j - 15]) + block[j - 16];
            j++;
        }

        uint32_t a = H[0], b = H[1], c = H[2], d = H[3],
                 e = H[4], f = H[5], g = H[6], h = H[7];
        j = 0;
        while (j < 64) {
            uint32_t temp1 = h + sigmaOne(e) + choose(e, f, g) + K[j] + block[j];
            uint32_t temp2 = sigmaZero(a) + majority(a, b, c);
            h = g; g = f; f = e; e = d + temp1; d = c; c = b; b = a; a = temp1 + temp2;
            j++;
        }

        H[0] += a; H[1] += b; H[2] += c; H[3] += d;
        H[4] += e; H[5] += f; H[6] += g; H[7] += h;

        i += 64;
    }

    std::string hashValue;
    size_t k = 0;
    while (k < 8) {
        uint32_t h = H[k];
        hashValue += std::string((char *)&h, sizeof(h));
        k++;
    }
    return hashValue;
}

int main() {
    std::ifstream file("book_of_mark.txt");
    if (!file.is_open()) {
        std::cout << "File not found or couldn't be opened." << std::endl;
        return 1;
    }

    std::stringstream buffer;
    buffer << file.rdbuf();
    file.close();

    std::string message = buffer.str();
    std::string hashValue = sha256(message);

    std::cout << "Hash value: " << std::endl;
    for (size_t i = 0; i < hashValue.length(); i++) {
        printf("%02x", (unsigned char)hashValue[i]);
    }
    std::cout << std::endl;
    return 0;
}


