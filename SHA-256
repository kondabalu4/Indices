#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <iomanip>
#include <cstdint>

// Constants for SHA-256 algorithm
const uint32_t K[64] = {
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
    // ... (rest of the K constants)
};

uint32_t H[8] = {
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
    // ... (rest of the initial hash values)
};

// Functions for bitwise operations
uint32_t rotr(uint32_t x, uint32_t n) {
    return (x >> n) | (x << (32 - n));
}

uint32_t ch(uint32_t x, uint32_t y, uint32_t z) {
    return (x & y) ^ (~x & z);
}

// ... (rest of the helper functions)

// Function to compute SHA-256 hash
std::string sha256(const std::string &msg) {
    size_t bit_len = msg.length() * 8;
    std::string padded_msg = msg + (char)0x80;

    while ((padded_msg.length() * 8 + 64) % 512 != 0) {
        padded_msg += (char)0x00;
    }

    padded_msg += std::string((char *)&bit_len, sizeof(bit_len));

    // Processing padded message in blocks of 512 bits
    size_t i = 0;
    while (i < padded_msg.length()) {
        uint32_t x[64] = {0};
        size_t j = 0;
        // ... (rest of the message parsing and processing)
    }

    // Constructing the final hash value
    std::string hash_value;
    size_t k = 0;
    while (k < 8) {
        uint32_t h = H[k];
        hash_value += std::string((char *)&h, sizeof(h));
        k++;
    }
    return hash_value;
}

int main() {
    std::ifstream file("book_of_mark.txt");
    if (!file.is_open()) {
        std::cerr << "Error opening the file!" << std::endl;
        return 1;
    }

    // Reading contents of the file into a stringstream
    std::stringstream buff;
    buff << file.rdbuf();
    file.close();

    // Getting the message from the stringstream
    std::string message = buff.str();

    // Computing the SHA-256 hash
    std::string hash_value = sha256(message);

    // Displaying the hash value
    std::cout << "Hash value: " << std::endl;
    for (size_t i = 0; i < hash_value.length(); i++) {
        std::cout << std::hex << std::setw(2) << std::setfill('0')
                  << static_cast<unsigned int>(static_cast<unsigned char>(hash_value[i]));
    }
    std::cout << std::endl;

    return 0;
}
