#include <iostream>

struct Node {
    int row;
    int col;
    int value;
    Node* next;
};

class SparseMatrix {
private:
    Node* head;

public:
    // Constructor for initializing the linked list
    SparseMatrix() : head(nullptr) {}

    // Function for adding a non-zero element to sparse matrix
    void addElement(int row, int col, int value) {
        Node* newNode = new Node{row, col, value, nullptr}; // Create a new node

        if (!head) {
            head = newNode; // If the list is empty, set the new node as the head
        } else {
            Node* temp = head;
            while (temp->next) {
                temp = temp->next; // Traverse the list to find the last node
            }
            temp->next = newNode; // Set the new node as the next node of the last node
        }
    }

    // Function for generating and display the compact version of the sparse matrix
    void generateCompactMatrix(int numRows, int numCols) {
        int compactMatrix[numRows][numCols]; // Compact version of the sparse matrix

        // Initializing compactmatrix with zeros
        for (int i = 0; i < numRows; ++i) {
            for (int j = 0; j < numCols; ++j) {
                compactMatrix[i][j] = 0;
            }
        }

        // Populate compactMatrix using the linked list
        Node* temp = head;
        while (temp) {
            compactMatrix[temp->row][temp->col] = temp->value;
            temp = temp->next; // Move to the next node
        }

        // Display the compact version of the sparse matrix
        std::cout << "Compact Sparse Matrix:" << std::endl;
        for (int i = 0; i < numRows; ++i) {
            for (int j = 0; j < numCols; ++j) {
                std::cout << compactMatrix[i][j] << " ";
            }
            std::cout << std::endl;
        }
    }

    // Destructor to free the memory the linked list was using
    ~SparseMatrix() {
        while (head) {
            Node* temp = head;
            head = head->next;
            delete temp; // Delete the current node
        }
    }
};

int main() {
    SparseMatrix sparseMatrix;

    int numRows, numCols, numElements;
    std::cout << "Enter the number of rows: ";
    std::cin >> numRows;
    std::cout << "Enter the number of columns: ";
    std::cin >> numCols;

    std::cout << "Enter the number of non-zero elements: ";
    std::cin >> numElements;

    std::cout << "Enter  the elements in the format 'row column value':" << std::endl;
    for (int i = 0; i < numElements; ++i) {
        int row, col, value;
        std::cout << "Element " << i + 1 << ": ";
        std::cin >> row >> col >> value;
        sparseMatrix.addElement(row, col, value);
    }

    sparseMatrix.generateCompactMatrix(numRows, numCols);

    return 0;
}
